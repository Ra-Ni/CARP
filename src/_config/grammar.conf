/*
BIN: make binary
UNARY: make the second last node the parent of the last node
PUSH: marks the previous node and adds it to the node stack
NOP: pushes an epsilon node
NEW_X: pushes a new node with name X.
CHK: verifies if the top node has children. If no children, makes label epsilon
COND_UNARY: verifies if the top node is epsilon, if so pops it. else unary
IUNARY: make the last node the parent of the seocnd last node
CHK_MERGE: merges the child of the node with the parent if the parent has the child as the only one.
FLAT: flattens the children of the current node to the parent node
APPEND: appends the top of the stack to the label of current node
SWAP: swaps the last child and second last child.

*/

Start -> Prog .
Prog -> NEW_prog NEW_group ClassList FuncDefList main PUSH FuncBody UNARY UNARY .

ClassList -> ClassDecl UNARY ClassList
	| .
ClassDecl -> class NEW KIND_class id PUSH AS_name InheritList lcurbr NEW_group MembList CUNARY rcurbr semi .

InheritList -> inherits BEGIN id PUSH InheritList2 END AS_inherits
    | .

InheritList2 -> comma id PUSH InheritList2
	| .

MembList -> DataMember UNARY MembList
	| .
DataMember -> Visibility MemberDecl SWAP MAP_visibility_kind .
MemberDecl -> func NEW KIND_function id PUSH AS_name FuncDecl semi
	| VarDecl semi .
FuncDecl -> lpar NEW_group FParamList CUNARY rpar colon FuncType AS_return  .
FParamList -> VarDecl UPD_kind_parameter UNARY FParamList2
	| .
FParamList2 -> comma VarDecl UPD_kind_parameter UNARY FParamList2
	| .


DimList -> lsqbr PUSH Intnum rsqbr PUSH DimList
	| .
VarDecl -> NEW KIND_variable Type AS_type id PUSH AS_name IFS BEGIN DimList END IFS_default APP_type .





FuncDefList -> FuncDef UNARY FuncDefList
	| .

FuncDef -> func PUSH KIND_function IFS_sr BEGIN id PUSH ScopeSpec END IFS_default AS_name FuncDecl FuncBody .

FuncBody -> lcurbr NEW_body LocalDecls StatementList CUNARY rcurbr .

LocalDecls -> var NEW_group lcurbr VarDeclList rcurbr CUNARY
    | .

VarDeclList -> VarDecl UNARY semi VarDeclList
	| .
StatementList -> Statement UNARY StatementList
	| .
Statement -> NEW id PUSH AS_name VarFunc semi
	| if PUSH lpar Expr UNARY rpar then PUSH UPD_kind_block StatBlock CUNARY else PUSH UPD_kind_block StatBlock CUNARY semi
	| while PUSH lpar Expr UNARY rpar NEW_block UPD_name_do StatBlock CUNARY semi
	| read PUSH lpar VarList UNARY rpar semi
	| write PUSH lpar Expr UNARY rpar semi
	| return PUSH lpar Expr UNARY rpar semi
	| break PUSH semi
	| continue PUSH semi  .

VarFunc -> Var VarFunc1 VarFunc3 | FCall VarFunc1 .
VarFunc1 -> dot PUSH NEW id PUSH AS_name VarFunc2 BIN | .
VarFunc2 -> Var VarFunc1
    | FCall VarFunc1 .
VarFunc3 -> assign PUSH Expr BIN | .


Var -> KIND_variable NEW_index IndiceList CUNARY .

IndiceList -> lsqbr Expr UNARY rsqbr IndiceList
	| .

FCall -> KIND_function lpar NEW_args AParams CUNARY rpar .
AParams -> Expr UNARY AParams2
	| .
AParams2 -> comma Expr UNARY AParams2
	| .
Expr -> ArithExpr Expr2 .
Expr2 -> RelOp ArithExpr BIN
	| .
ArithExpr -> Term ArithExpr2 .
ArithExpr2 -> AddOp Term BIN ArithExpr2
	| .
Term -> Factor Term2 .
Term2 -> MultOp Factor BIN Term2
	| .

Factor -> FuncVarList
	| intnum PUSH TYPE_integer KIND_variable
	| floatnum PUSH TYPE_float KIND_variable
	| stringlit PUSH TYPE_string KIND_variable
	| lpar Expr rpar
	| not PUSH Factor UNARY
	| Sign Factor UNARY
	| qm lsqbr NEW_Factor Expr UNARY colon Expr UNARY colon Expr UNARY rsqbr .
FuncVarList -> NEW id PUSH AS_name FuncVarList2 FuncVarList3 .
FuncVarList2 -> Var
    | FCall .
FuncVarList3 -> dot PUSH NEW id PUSH AS_name FuncVarList2 BIN
    | .
StatBlock -> lcurbr StatementList rcurbr
	| Statement UNARY
	| .
VarList -> NEW id PUSH AS_name VarList2 .
VarList2 -> Var VarList4
    | FCall VarList3 .
VarList3 -> dot PUSH NEW id PUSH AS_name VarList2 BIN .
VarList4 -> VarList3
    | .


ScopeSpec -> sr id PUSH
	| .

RelOp -> RelOp2 PUSH UPD_kind_relop .
RelOp2 -> eq
	| neq
	| lt
	| gt
	| leq
	| geq .

Sign -> Sign2 PUSH UPD_kind_sign .
Sign2 -> plus
	| minus .
Type -> integer PUSH
	| float PUSH
	| string PUSH
	| id PUSH .
Intnum -> intnum PUSH
	| .
MultOp -> MultOp2 PUSH UPD_kind_multop .
MultOp2 -> mult
	| div
	| and .
Visibility -> public PUSH
	| private PUSH
	| NEW_protected
	| protected PUSH .

FuncType -> Type
	| void PUSH .
AddOp -> AddOp2 PUSH UPD_kind_addop .
AddOp2 -> plus
	| minus
	| or .

BIN -> .
UNARY -> .
PUSH -> .
BEGIN -> .
END -> .
NEW -> .
SWAP -> .
CUNARY -> .

NEW_Factor -> .
NEW_protected -> .
NEW_block -> .
NEW_body -> .
NEW_index -> .
NEW_group -> .
NEW_args -> .
NEW_prog -> .

APP_type -> .

MAP_visibility_kind -> .

KIND_variable -> .
KIND_function -> .
KIND_class -> .

TYPE_integer -> .
TYPE_string -> .
TYPE_float -> .

AS_type -> .
AS_name -> .
AS_return -> .
AS_inherits -> .

IFS -> .
IFS_sr -> .
IFS_default -> .

UPD_kind_sign -> .
UPD_kind_relop -> .
UPD_kind_addop -> .
UPD_kind_parameter -> .
UPD_kind_multop -> .
UPD_kind_block -> .
UPD_name_do -> .