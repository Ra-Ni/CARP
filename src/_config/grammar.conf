/*
BIN: make binary
UNARY: make the second last node the parent of the last node
PUSH: marks the previous node and adds it to the node stack
NOP: pushes an epsilon node
NEW_X: pushes a new node with name X.
CHK: verifies if the top node has children. If no children, makes label epsilon
COND_UNARY: verifies if the top node is epsilon, if so pops it. else unary
IUNARY: make the last node the parent of the seocnd last node
CHK_MERGE: merges the child of the node with the parent if the parent has the child as the only one.
FLAT: flattens the children of the current node to the parent node
APPEND: appends the top of the stack to the label of current node
SWAP: swaps the last child and second last child.

*/

Start -> Prog .
Prog -> NEW_group ClassList FuncDefList main PUSH FuncBody UNARY .

ClassList -> ClassDecl UNARY ClassList
	| .
ClassDecl -> class PUSH id PUSH UNARY InheritList UNARY lcurbr NEW_group MembList CHK UNARY rcurbr semi .

InheritList -> inherits PUSH id PUSH UNARY InheritList2
    | NOP .

InheritList2 -> comma id PUSH UNARY InheritList2
	| .

MembList -> NEW_decl DataMember UNARY MembList
	| .
DataMember -> Visibility UNARY MemberDecl UNARY.
MemberDecl -> func PUSH NOP UNARY id PUSH UNARY FuncDecl NOP UNARY semi
	| VarDecl semi .
FuncDecl -> lpar NEW_params FParamList CHK UNARY rpar colon FuncType UNARY  .
FParamList -> VarDecl UNARY FParamList2
	| .
FParamList2 -> comma VarDecl UNARY FParamList2
	| .


DimList -> lsqbr Intnum UNARY rsqbr DimList
	| .
VarDecl -> NEW_vardecl Type UNARY id PUSH UNARY NEW_dim DimList CHK UNARY .





FuncDefList -> FuncDef UNARY FuncDefList
	| .

FuncDef -> func PUSH id PUSH UNARY ScopeSpec UNARY FuncDecl FuncBody .

FuncBody -> lcurbr NEW_body LocalDecls StatementList CHK UNARY rcurbr .

LocalDecls -> var NEW_group lcurbr VarDeclList rcurbr UNARY
    | .

VarDeclList -> VarDecl UNARY semi VarDeclList
	| .
StatementList -> Statement UNARY StatementList
	| .
Statement -> id PUSH VarFunc semi
	| if PUSH lpar Expr UNARY rpar then StatBlock UNARY else StatBlock UNARY semi
	| while PUSH lpar Expr UNARY rpar StatBlock UNARY semi
	| read PUSH lpar VarList UNARY rpar semi
	| write PUSH lpar Expr UNARY rpar semi
	| return PUSH lpar Expr UNARY rpar semi
	| break PUSH semi
	| continue PUSH semi  .

VarFunc -> Var VarFunc1 VarFunc3 | FCall VarFunc1 .
VarFunc1 -> dot PUSH id PUSH VarFunc2 BIN | .
VarFunc2 -> Var VarFunc1
    | FCall VarFunc1 .
VarFunc3 -> assign PUSH Expr BIN | .

Var -> NEW_var IUNARY NEW_index IndiceList CHK UNARY .
IndiceList -> lsqbr Expr UNARY rsqbr IndiceList
	| .

FCall -> lpar NEW_call IUNARY NEW_args AParams CHK UNARY rpar .
AParams -> Expr UNARY AParams2
	| .
AParams2 -> comma Expr UNARY AParams2
	| .
Expr -> ArithExpr Expr2 .
Expr2 -> RelOp PUSH ArithExpr BIN
	| .
ArithExpr -> Term ArithExpr2 .
ArithExpr2 -> AddOp PUSH Term BIN ArithExpr2
	| .
Term -> Factor Term2 .
Term2 -> MultOp PUSH Factor BIN Term2
	| .
Factor -> FuncVarList
	| intnum PUSH NEW_integer NEW_const IUNARY IUNARY
	| floatnum PUSH NEW_float NEW_const IUNARY IUNARY
	| stringlit PUSH NEW_string NEW_const IUNARY IUNARY
	| lpar Expr rpar
	| not PUSH Factor UNARY
	| Sign PUSH Factor UNARY
	| qm lsqbr NEW_Factor Expr UNARY colon Expr UNARY colon Expr UNARY rsqbr .
FuncVarList -> id PUSH FuncVarList2 FuncVarList3 .
FuncVarList2 -> Var
    | FCall .
FuncVarList3 -> dot PUSH id PUSH FuncVarList2 BIN
    | .
StatBlock -> lcurbr NEW_block StatementList rcurbr
	| NEW_StatBlock Statement UNARY
	| NOP .
VarList -> id PUSH VarList2 .
VarList2 -> Var VarList4
    | FCall VarList3 .
VarList3 -> dot PUSH id PUSH VarList2 BIN .
VarList4 -> VarList3
    | .


ScopeSpec -> sr id PUSH
	| NOP .
RelOp -> eq
	| neq
	| lt
	| gt
	| leq
	| geq .
Sign -> plus
	| minus .
Type -> integer PUSH
	| float PUSH
	| string PUSH
	| id PUSH .
Intnum -> intnum PUSH
	| NOP .
MultOp -> mult
	| div
	| and .
Visibility -> public PUSH
	| private PUSH
	| NEW_protected
	| protected PUSH .

FuncType -> Type
	| void PUSH .
AddOp -> plus
	| minus
	| or .

BIN -> .
UNARY -> .
PUSH -> .
NOP -> .
CHK -> .
IUNARY -> .

NEW_dim -> .
NEW_Factor -> .
NEW_call -> .

NEW_StatBlock -> .
NEW_var -> .
NEW_vardecl -> .
NEW_protected -> .
NEW_block -> .
NEW_body -> .
NEW_decl -> .
NEW_index -> .
NEW_const -> .
NEW_params -> .
NEW_group -> .
NEW_args -> .
NEW_integer -> .
NEW_float -> .
NEW_string -> .