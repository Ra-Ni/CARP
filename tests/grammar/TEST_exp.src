

// ====== main ====== //
main {

    // involving addop
    a = a + b;
    a = a - b;

    // involving multop
    a = a * b;
    a = a / b;

    // involving relop
    a = 1 == 2;
    a = 1 < 2;
    a = 1 > 2;
    a = 1 <> 2;
    a = 1 <= 2;
    a = 1 >= 2;

    // involving addop + multop
    a = a + b / c + d;
    a = a / c * d;
    a = a * c / d;


    // involving multop + relop
    a = a * 1 == 2;
    a = 1 == a / 2;
    a = a * 1 < 2;
    a = 1 < a / 2;
    a = 1 > a / 2;
    a = a * b > 2;
    a = 1 <> a / 2;
    a = a * b <> 2;
    a = 1 <= 2 / a;
    a = c * b <= 2;
    a = c * d >= 2;
    a = 1 >= 2 / b;

    // involving addop + multop + relop
    a = a + b * c <> d;
    a = b * c + d * e + f > d * g + h - l;

    // involving parentheses
    a = (a * b) + (c * d);
    b = b + (c * d) + (e);
    c = (a + b) * (d + e);

    // involving nested parenhteses
    // It doesn't matter. The program itself handles nested expressions and so parenthesis are sugar
    a = (((((a + b)) * c)) + d); // is the same as (a + b) * c + d

    // involving ternary operator


    // involving not
    // c = a[not "hi"];

    // involving sign
    a = -a;
    b = +b;

    // involving literals
    a = "hello" + " " + "world";

    // involving variable + idnest
    //check the TEST_variable.src

    // involving function calls
    //check the TEST_variable.src

    // involving all the above in one expression
    a = -b + c * d - e  / 3 < b + (c * d) + (e);

}
/*
    classes
    --------------------------------------
| | no class declaration
| | class declaration
| | multiple class declarations
| | no data member declaration
| | data member declaration
| | multiple data member declaration
| | no member function declaration
| | member function declaration
| | multiple member function declaration
| | no member
| | no inherited class
| | one inherited class
| | multiple inherited classes
| | private member specifier
| | public member specifier
| | absence of member specifier

    functions: definitions
    --------------------------------------
| | no main function definition (not allowed)
| | main function definition
| | multiple main function definitions (not allowed)
| | no free function definition
| | free function definition
| | multiple free function definitions
| | no member function definition
| | member function definition
| | multiple member function definitions
| | return type: void
| | return type: integer
| | return type: float
| | return type: string
| | return type: id
| | return type: array (not allowed)


    functions: formal parameters
    --------------------------------------
| | type: integer
| | type: float
| | type: string
| | type: id
| | type: 1-dim array
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    functions: calls
    --------------------------------------
| | free function call
| | member function call
| | parameters:0
| | parameters:1
| | parameters:n
| | array parameter - 1-dim
| | array parameter - n-dim
| | array parameter - with size
| | array parameter - without size
| | function call as statement
| | function call as expression factor
| | expression as parameter

    variable declaration
    --------------------------------------
| | type: integer
| | type: float
| | type: string
| | type: id
| | type: 1-dim array
| | type: n-dim array
| | type: array (with size)
| | type: array (without size)

    function body: local variable declaration block
    --------------------------------------
| | no local variable declarations block
| | local variable declaration block
| | multiple local variable declarations block (not allowed)
| | no variables in block
| | 1 variable declared in block
| | multiple variables declared in block

    function body: statements
    --------------------------------------
| | no statement
| | 1 statement
| | n statements
| | if statement
| | if: empty then or else blocks
| | if: 1-statement then or else blocks
| | if: n-statements then or else blocks
| | while statement
| | while: empty block
| | while: 1-statement block
| | while: n-statement block
| | read(<variable>) statement
| | write(<expr>) statement
| | return(<expr>) statement
| | break statement
| | continue statement
| | assignment statement

    variable + idnest
    --------------------------------------
| | id
| | id.id
| | id.id(id)
| | id(id).id
| | id(id).id()
| | id.id[id]
| | id[id].id
| | id[id].id[id]
| | id.id[id][id]
| | id[id][id].id
| | id[id][id].id[id][id]
| | id(id).id[id]
| | id(id).id[id][id]
| | expression as array index

    expressions
    --------------------------------------
|X| single variable
|X| involving addop
|X| involving multop
|X| involving relop
|X| involving addop + multop
|X| involving multop + relop
|X| involving addop + multop + relop
|X| involving parentheses
|X| involving nested parenhteses
|X| involving ternary operator
|X| involving not
|X| involving sign
|X| involving literals
|X| involving variable + idnest
|X| involving function calls
|X| involving all the above in one expression
*/